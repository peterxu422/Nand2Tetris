// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
	
	static Array scr;
	static boolean color;
	static Array bitWord;
	
    /** Initializes the Screen. */
    function void init() {
		do Screen.clearScreen();
		let color = true;
		
		let bitWord = Array.new(16);
		let bitWord[0] = 1;
		let bitWord[1] = 2;
		let bitWord[2] = 4;
		let bitWord[3] = 8;
		let bitWord[4] = 16;
		let bitWord[5] = 32;
		let bitWord[6] = 64;
		let bitWord[7] = 128;
		let bitWord[8] = 256;
		let bitWord[9] = 512;
		let bitWord[10] = 1024;
		let bitWord[11] = 2048;
		let bitWord[12] = 4096;
		let bitWord[13] = 8192;
		let bitWord[14] = 16384;
		let bitWord[15] = (-32767) - 1;
		
		return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		let scr = 16384;
		
		//Screen memory map is 8k i.e. 256x32 16-bit words
		while(i < 8192) {
			let scr[i] = 0;
			let i = i + 1;
		}
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
		var int c, clr, tmp;
		
		if((x < 0) | (y < 0) | (x > 512) | (y > 256)) {
			do Sys.error(7);
		}
		
		//Modulo
		let c = x - ((x/16) * 16);
		let tmp = (y*32) + (x/16);
		
		if(color) {
			let scr[tmp] = (scr[tmp] | bitWord[c]);
		}
		else {
			let scr[tmp] = (scr[tmp] & ~(bitWord[c]));
		}
		
		return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx, dy, adyMinusbdx, a, b, a2, b2;
		var boolean illx1, illx2, illy1, illy2;
		
		let illx1 = (x1 < 0) | (x1 > 512);
		let illx2 = (x2 < 0) | (x2 > 512);
		let illy1 = (y1 < 0) | (y1 > 256);
		let illy2 = (y2 < 0) | (y2 > 256);
		
		if( illx1 | illx2 | illy1 | illy2 ) {
			do Sys.error(8);
		}
		
		let a = 0;
		let b = 0;
		let dx = x2 - x1;
		let dy = y2 - y1;
		let adyMinusbdx = 0;
		
		//Horizontal
		if(dy = 0) {
			if(dx > 0) {
				while( ((a < dx) | (a = dx)) ) {
					do Screen.drawPixel(x1 + a, y1);
					let a = a + 1;
				}
				return;
			}
			else {
				while( ((a > dx) | (a = dx)) ) {
					do Screen.drawPixel(x1 + a, y1);
					let a = a - 1;
				}
				return;
			}
		}
		
		//Vertical
		if(dx = 0) {
			if(dy > 0) {
				while( ((b < dy) | (b = dy)) ) {
					do Screen.drawPixel(x1, y1 + b);
					let b = b + 1;
				}
				return;
			}
			else {
				while( ((b > dy) | (b = dy)) ) {
					do Screen.drawPixel(x1, y1 + b);
					let b = b - 1;
				}
				return;
			}
		}
		
		// dx, dy > 0
		if( (dx > 0) & (dy > 0) ) {
			while( ((a < dx) | (a = dx)) & ((b < dy) | (b = dy)) ) {
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(adyMinusbdx < 0) {
					let a = a + 1;
					let adyMinusbdx = adyMinusbdx + dy;
				}
				else {
					let b = b + 1;
					let adyMinusbdx = adyMinusbdx - dx;
				}
			}
		}
		
		//dx, dy < 0
		if( (dx < 0) & (dy < 0) ) {
			while( ((a > dx) | (a = dx)) & ((b > dy) | (b = dy)) ) {
				do Screen.drawPixel(x1 + a, y1 + b);
				
				// gt instead of lt
				if(adyMinusbdx > 0) {
					let a = a - 1;						//Changed to decr
					let adyMinusbdx = adyMinusbdx + dy;
				}
				else {
					let b = b - 1;						//Changed to decr
					let adyMinusbdx = adyMinusbdx - dx;
				}
			}
		}
		
		// dx > 0, dy < 0
		if( (dx > 0) & (dy < 0) ) {
			while( ((a < dx) | (a = dx)) & ((b > dy) | (b = dy)) ) {
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(adyMinusbdx < 0) {
					let a = a + 1;
					let adyMinusbdx = adyMinusbdx - dy; //Changed + to - since dy < 0
				}
				else {
					let b = b - 1; 						//Changed to decr
					let adyMinusbdx = adyMinusbdx - dx;
				}
			}
		}
		
		// dx < 0, dy > 0
		if( (dx < 0) & (dy > 0) ) {
			while( ((a > dx) | (a = dx)) & ((b < dy) | (b = dy)) ) {
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(adyMinusbdx < 0) {
					let a = a - 1; 						//Changed to decr
					let adyMinusbdx = adyMinusbdx + dy; //Changed + to - since dy < 0
				}
				else {
					let b = b + 1;
					let adyMinusbdx = adyMinusbdx + dx;
				}
			}
		}
		
		return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int j, tmp;
		var boolean illx1, illx2, illy1, illy2;
		
		let illx1 = (x1 < 0) | (x1 > 512);
		let illx2 = (x2 < 0) | (x2 > 512);
		let illy1 = (y1 < 0) | (y1 > 256);
		let illy2 = (y2 < 0) | (y2 > 256);
		
		if( illx1 | illx2 | illy1 | illy2 ) {
			do Sys.error(9);
		}
		
		let j = y1;
		let tmp = y2 + 1;
		while(j < tmp) {
			do Screen.drawLine(x1, j, x2, j);
			let j = j + 1;
		}
		
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		var int dy, tmp, sqrt;
		var boolean illr1, illr2;
		
		if((cx < 0) | (cx > 512) | (cy < 0) | (cy > 256)) {
			do Sys.error(12);
		}
		
		let illr1 = ((cx + r) > 512) | ((cx - r) < 0);
		let illr2 = ((cy + r) > 256) | ((cy - r) < 0);
		
		if( (r < 0) | illr1 | illr2) {
			do Sys.error(13);
		}
		
		let dy = -r;
		let tmp = r + 1;
		
		while(dy < tmp) {
			let sqrt = Math.sqrt((r*r) - (dy*dy));
			do Screen.drawLine(cx - sqrt, cy + dy, cx + sqrt, cy + dy);
			let dy = dy + 1;
		}
		
		return;
    }
}
