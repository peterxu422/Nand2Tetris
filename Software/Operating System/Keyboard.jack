// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	
	static Array keyboard;
	static String buffer;
	
    /** Initializes the keyboard. */
    function void init() {
		let keyboard = 24576;
		let buffer = String.new(250);
		return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		if(keyboard[0] = 0) {
			return 0;
		}
		
		return keyboard[0];
    }	

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
		var int ctr;
		var char c;
		var boolean ok, blksq, blink;

		let c = 0;
		let ctr = 0;
		let blksq = true;
		let blink = false;
		
		while(c = 0) {
			let c = Keyboard.keyPressed();
			
			//Blinking Cursor
			if(blksq & (ctr > 10000)) {
				do Output.printChar(0);
				let ctr = 0;
				let blksq = false;
				let blink = true;
			}
			if(blink & (ctr > 10000)) {
				do Output.backSpace();
				let ctr = 0;
				let blksq = true;
				let blink = false;
			}
			
			let ctr = ctr + 1;
		}
		
		while(~(Keyboard.keyPressed() = 0)) {
		}
		
		if(~blksq) {
			do Output.backSpace();
		}
		
		do Output.printChar(c);
		return c;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
		var String s;
		var int i, buflen;
		var char c, b;
		
		let i = 0;
		do Output.printString(message);
		
		while(true) {
			let c = Keyboard.readChar();
			
			//Newline
			if(c = 128) {
				let buflen = buffer.length();
				let s = String.new(buflen);
				
				//Copy buffer string into s
				while(i < buflen) {
					let b = buffer.charAt(i);
					do s.appendChar(b);
					let i = i + 1;
				}
				
				while(buffer.length() > 0) {
					do buffer.eraseLastChar();
				}
				
				return s;
			}
			else {
				//Backspace
				if(c = 129) {
					do buffer.eraseLastChar();
				}
				else {
					let buffer = buffer.appendChar(c);
				}
			}
		}
		
		return "";
    }   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
		var String i;
		let i = Keyboard.readLine(message);
		return (i.intValue());
    }
}
