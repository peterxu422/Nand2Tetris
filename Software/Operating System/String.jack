// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	
	field Array str;
	field int maxLen, len;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		if(maxLength < 0) {
			do Sys.error(14);
		}
		
		//Maybe need to initialize everything to 0
		let maxLen = maxLength;
		let len = 0;
		
		if(maxLength = 0) {
			let maxLength = 1;
		}
		
		let str = Array.new(maxLength);
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do str.dispose();
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		//String.length() or len
		if(j > (len-1) ) {
			do Sys.error(15);
		}
		
		return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if(j > (len-1)) {
			do Sys.error(16);
		}
		
		let str[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if(len < maxLen) {
			let str[len] = c;
			let len = len + 1;
		}
		else {
			do Sys.error(17);
		}
		
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if(len = 0) {
			do Sys.error(18);
		}
		
		let str[len-1] = 0;
		let len = len - 1;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int i, v, d;
		
		if(str[0] = 45) {
			let i = 1;
		}
		else {
			let i = 0;
		}
		
		while(i < len) {
			let d = str[i] - 48;
			let v = (v*10)+d;
			let i = i + 1;
		}
		
		if(str[0] = 45) {
			let v = -v;
		}
		
		return v;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		var int lastDigit;
		var int tmp;
		
		if(number > 32767) {
			do Sys.error(19);
		}
		
		// Modulo
		let tmp = Math.abs(number);	//Costly. Each recursive all need to do this operation.
		let lastDigit = tmp - ((tmp/10) * 10);
		let lastDigit = lastDigit + 48;
		
		if(tmp < 10) {
			//Resets the string length so that it may be appended to once the last digit is evaluated
			let len = 0;
			if(number < 0) {
				do appendChar(45);
			}
			do appendChar(lastDigit);
		}
		else {
			//Use recursion because Most Significant Digit needs to be printed first but is evaluated last
			do setInt(number/10);
			do appendChar(lastDigit);
		}
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
